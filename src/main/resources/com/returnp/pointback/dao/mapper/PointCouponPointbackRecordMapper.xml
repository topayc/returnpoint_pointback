<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.returnp.pointback.dao.mapper.PointCouponPointbackRecordMapper">
  <resultMap id="BaseResultMap" type="com.returnp.pointback.model.PointCouponPointbackRecord">
    <id column="pointCouponPointbackRecordNo" jdbcType="INTEGER" property="pointCouponPointbackRecordNo" />
    <result column="memberNo" jdbcType="INTEGER" property="memberNo" />
    <result column="pointCouponTransactionNo" jdbcType="INTEGER" property="pointCouponTransactionNo" />
    <result column="nodeNo" jdbcType="INTEGER" property="nodeNo" />
    <result column="nodeType" jdbcType="VARCHAR" property="nodeType" />
    <result column="accRate" jdbcType="REAL" property="accRate" />
    <result column="accPoint" jdbcType="REAL" property="accPoint" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    pointCouponPointbackRecordNo, memberNo, pointCouponTransactionNo, nodeNo, nodeType, 
    accRate, accPoint, createTime, updateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from point_coupon_pointback_record
    where pointCouponPointbackRecordNo = #{pointCouponPointbackRecordNo,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from point_coupon_pointback_record
    where pointCouponPointbackRecordNo = #{pointCouponPointbackRecordNo,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.returnp.pointback.model.PointCouponPointbackRecord">
    insert into point_coupon_pointback_record (pointCouponPointbackRecordNo, memberNo, 
      pointCouponTransactionNo, nodeNo, nodeType, 
      accRate, accPoint, createTime, 
      updateTime)
    values (#{pointCouponPointbackRecordNo,jdbcType=INTEGER}, #{memberNo,jdbcType=INTEGER}, 
      #{pointCouponTransactionNo,jdbcType=INTEGER}, #{nodeNo,jdbcType=INTEGER}, #{nodeType,jdbcType=VARCHAR}, 
      #{accRate,jdbcType=REAL}, #{accPoint,jdbcType=REAL}, NOW(), NOW())
         <selectKey keyProperty="pointCouponPointbackRecordNo" resultType="java.lang.Integer" order ="AFTER">
		    SELECT LAST_INSERT_ID()
	 </selectKey>	
  </insert>
  <insert id="insertSelective" parameterType="com.returnp.pointback.model.PointCouponPointbackRecord">
    insert into point_coupon_pointback_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pointCouponPointbackRecordNo != null">
        pointCouponPointbackRecordNo,
      </if>
      <if test="memberNo != null">
        memberNo,
      </if>
      <if test="pointCouponTransactionNo != null">
        pointCouponTransactionNo,
      </if>
      <if test="nodeNo != null">
        nodeNo,
      </if>
      <if test="nodeType != null">
        nodeType,
      </if>
      <if test="accRate != null">
        accRate,
      </if>
      <if test="accPoint != null">
        accPoint,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pointCouponPointbackRecordNo != null">
        #{pointCouponPointbackRecordNo,jdbcType=INTEGER},
      </if>
      <if test="memberNo != null">
        #{memberNo,jdbcType=INTEGER},
      </if>
      <if test="pointCouponTransactionNo != null">
        #{pointCouponTransactionNo,jdbcType=INTEGER},
      </if>
      <if test="nodeNo != null">
        #{nodeNo,jdbcType=INTEGER},
      </if>
      <if test="nodeType != null">
        #{nodeType,jdbcType=VARCHAR},
      </if>
      <if test="accRate != null">
        #{accRate,jdbcType=REAL},
      </if>
      <if test="accPoint != null">
        #{accPoint,jdbcType=REAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.returnp.pointback.model.PointCouponPointbackRecord">
    update point_coupon_pointback_record
    <set>
      <if test="memberNo != null">
        memberNo = #{memberNo,jdbcType=INTEGER},
      </if>
      <if test="pointCouponTransactionNo != null">
        pointCouponTransactionNo = #{pointCouponTransactionNo,jdbcType=INTEGER},
      </if>
      <if test="nodeNo != null">
        nodeNo = #{nodeNo,jdbcType=INTEGER},
      </if>
      <if test="nodeType != null">
        nodeType = #{nodeType,jdbcType=VARCHAR},
      </if>
      <if test="accRate != null">
        accRate = #{accRate,jdbcType=REAL},
      </if>
      <if test="accPoint != null">
        accPoint = #{accPoint,jdbcType=REAL},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where pointCouponPointbackRecordNo = #{pointCouponPointbackRecordNo,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.returnp.pointback.model.PointCouponPointbackRecord">
    update point_coupon_pointback_record
    set memberNo = #{memberNo,jdbcType=INTEGER},
      pointCouponTransactionNo = #{pointCouponTransactionNo,jdbcType=INTEGER},
      nodeNo = #{nodeNo,jdbcType=INTEGER},
      nodeType = #{nodeType,jdbcType=VARCHAR},
      accRate = #{accRate,jdbcType=REAL},
      accPoint = #{accPoint,jdbcType=REAL},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = NOW()
    where pointCouponPointbackRecordNo = #{pointCouponPointbackRecordNo,jdbcType=INTEGER}
  </update>
</mapper>